spring.application.name=order-service

server.port=8046

server.shutdown=GRACEFUL

management.endpoints.web.exposure.include=*
management.info.git.mode=FULL

# =======================================
# DATABASE CONNECTION CONFIGURATION
# =======================================

spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:25432/postgres}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}
spring.jpa.open-in-view=false
spring.jpa.show-sql=true

#spring.datasource.initialization-mode=always
#spring.sql.init.mode=ALWAYS

logging.level.org.springframework.jdbc.datasource.init.ScriptUtils=DEBUG


# =======================================
# ORDER STATUS
# =======================================

orders.catalog-service-url=http://localhost:8045
orders.order-events-exchange=orders-exchange
orders.new-orders-queue=new-orders
orders.delivered-orders-queue=delivered-orders
orders.cancelled-orders-queue=cancelled-orders
orders.error-orders-queue=error-orders
orders.publish-order-events-job-cron=*/5 * * * * *
orders.new-orders-job-cron=*/10 * * * * *


# =======================================
# RESILIENCE4J METHODS
# =======================================

resilience4j.retry.backends.catalog-service.max-attempts=2
resilience4j.retry.backends.catalog-service.wait-duration=1s


resilience4j.circuitbreaker.backends.catalog-service.sliding-window-type=COUNT_BASED
resilience4j.circuitbreaker.backends.catalog-service.sliding-window-size=6
resilience4j.circuitbreaker.backends.catalog-service.minimum-number-of-calls=4
resilience4j.circuitbreaker.backends.catalog-service.wait-duration-in-open-state=20s
resilience4j.circuitbreaker.backends.catalog-service.permitted-number-of-calls-in-half-open-state=2
resilience4j.circuitbreaker.backends.catalog-service.failure-rate-threshold=50



# =======================================
# KAFKA BROKER CONNECTION
# =======================================
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}


# =======================================
# KAFKA PRODUCER CONFIGURATION
# =======================================
# Serializers for message keys and values

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# A unique ID for the producer client, useful for logging and monitoring
#spring.kafka.producer.client-id=${KAFKA_PRODUCER_CLIENT_ID:my-spring-producer}

# KAFKA CONSUMER CONFIGURATION
#spring.kafka.consumer.group-id=fresh-group-${random.uuid}
spring.kafka.consumer.group-id=order-service-group-v2

# Start reading from the earliest available message in the topic
spring.kafka.consumer.auto-offset-reset=earliest

# Deserializers for message keys and values
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# A unique ID for the consumer client
#spring.kafka.consumer.client-id=${KAFKA_CONSUMER_CLIENT_ID:my-spring-consumer}
















