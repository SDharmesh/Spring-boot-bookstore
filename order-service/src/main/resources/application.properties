spring.application.name=order-service

server.shutdown=GRACEFUL

management.endpoints.web.exposure.include=*
management.info.git.mode=FULL

# =======================================
# DATABASE CONNECTION CONFIGURATION
# =======================================
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:25432/postgres}
spring.datasource.username=${DB_USERNAME:postgres}
spring.datasource.password=${DB_PASSWORD:postgres}
spring.jpa.open-in-view=false


# =======================================
# KAFKA BROKER CONNECTION
# =======================================
# Use an environment variable for the server address. Defaults to localhost:9092 if not set.
spring.kafka.bootstrap-servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
# =======================================
# KAFKA PRODUCER CONFIGURATION
# =======================================
# Serializers for message keys and values
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

# A unique ID for the producer client, useful for logging and monitoring
spring.kafka.producer.client-id=${KAFKA_PRODUCER_CLIENT_ID:my-spring-producer}

# =======================================
# KAFKA CONSUMER CONFIGURATION
# =======================================
# The group ID for the consumer. Essential for parallel processing.
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:my-group}

# Start reading from the earliest available message in the topic
spring.kafka.consumer.auto-offset-reset=earliest

# Deserializers for message keys and values
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# A unique ID for the consumer client
spring.kafka.consumer.client-id=${KAFKA_CONSUMER_CLIENT_ID:my-spring-consumer}















